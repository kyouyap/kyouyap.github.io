## 重要

ユーザーはRooよりプログラミングが得意ですが、時短のためにRooにコーディングを依頼しています。

2回以上連続でテストを失敗した時は、現在の状況を整理して、一緒に解決方法を考えます。

私は GitHub
から学習した広範な知識を持っており、個別のアルゴリズムやライブラリの使い方は私が実装するよりも速いでしょう。テストコードを書いて動作確認しながら、ユーザーに説明しながらコードを書きます。

反面、現在のコンテキストに応じた処理は苦手です。コンテキストが不明瞭な時は、ユーザーに確認します。

## 作業開始準備

`git status` で現在の git のコンテキストを確認します。
もし指示された内容と無関係な変更が多い場合、現在の変更からユーザーに別のタスクとして開始するように提案してください。

無視するように言われた場合は、そのまま続行します。


# コーディングプラクティス

---

## 原則

### 関数型アプローチ (FP)
- **純粋関数を優先:** 外部状態に依存しない関数を作る
- **不変データ構造を使用:** 変更不可なオブジェクト（例: `@dataclass(frozen=True)`）を活用する
- **副作用を分離:** I/O や外部通信は関数の境界に押し出す
- **型安全性を確保:** 型ヒントをフル活用し、`mypy --strict` を CI で必須にする

### テスト駆動開発 (TDD)
- **Red-Green-Refactor サイクル:** 失敗するテスト → 実装 → リファクタ
- **テスト＝仕様:** テストがシステムの期待振る舞いを語る
- **小さな単位で反復:** 1 つの振る舞いにつき 1 つのテスト
- **常にリファクタ:** 重複排除と設計改善を継続

---

## 1. コードスタイル

| ツール           | 設定／運用                                            |
|------------------|-------------------------------------------------------|
| **black**        | 行長 88、`--target-version py313`                     |
| **ruff**         | flake8 + isort + pep8-naming を統合。CI で必須       |
| **pre-commit**   | `pre-commit run --all-files` を Git hook で強制       |

> *スタイル議論はツールに委ね、コードレビューでは設計・命名の本質に集中する。*

---

## 2. 型ヒント & 静的解析

- **PEP 695** の新ジェネリック構文（`class Box[T]: ...`）を活用
- ファイル先頭に必ず `from __future__ import annotations` を記述
- 型エイリアス例:
  ```python
  type JSON = dict[str, "JSON | str | int | bool | None"]
  ```
- **mypy 設定** (`pyproject.toml` 抜粋)
  ```ini
  [tool.mypy]
  python_version = "3.13"
  strict = true
  incremental = true
  warn_unused_ignores = true
  ```

---

## 3. Docstring 規約（Google Style）

```python
def fetch_user(user_id: int) -> User:
    """Retrieve a user record.

    Args:
        user_id: Unique identifier of the user.

    Returns:
        User: Retrieved user object.

    Raises:
        UserNotFoundError: If the user does not exist.

    Examples:
        >>> user = fetch_user(42)
        >>> assert user.id == 42
    """
```
- サマリ → 詳細 → Args → Returns → Raises → Examples の順序を厳守
- 1行サマリは動詞から始める
- Examples には `>>>` 形式で記述し、doctest 可能に

---

## 4. ディレクトリ構成（src レイアウト）

```
project/
├── docs/                     # ドキュメント
├── src/
│   └── my_package/           # アプリケーションコード
│       ├── models/           # データ構造・スキーマ定義
│       ├── services/         # ビジネスロジック
│       ├── adapters/         # 外部連携（DB, API など）
│       ├── cli/              # CLI エントリポイント
│       ├── utils/            # 汎用ユーティリティ
│       └── settings.py       # 設定管理（Pydantic など）
├── tests/                    # テストコード
├── pyproject.toml
└── README.md
```
- `src/` 以下は機能ごとに明確に分割
- プロジェクト固有の追加構造は都度追記

---

## 5. 依存性の注入（DI）

```python
from typing import Protocol

class UserRepo(Protocol):
    def save(self, user: User) -> None: ...

class SqlUserRepo:
    def save(self, user: User) -> None:
        # 実際の DB 保存処理
        ...

class UserService:
    def __init__(self, repo: UserRepo) -> None:
        self._repo = repo

    def register(self, user: User) -> None:
        self._repo.save(user)
```
- **コンストラクタインジェクション** を第一選択
- `dependency-injector` 等のコンテナ導入で設定と実実装を切り分け、テスト時は Stub / Mock に差し替え

---

## 6. エラー処理

- **ビジネスエラー用** にカスタム例外を定義
  ```python
  class BusinessError(Exception):
      """ビジネス要件に起因するエラー。"""
  ```
- 組み込み例外をむやみに握りつぶさない
- `try / except / else / finally` を適切に使い分け、必要に応じてロールバック処理を組み込む
- 例外メッセージには検索可能なキーワードと変数値を含める

---

## 7. ロギング

- `structlog` + 標準 `logging` で JSON フォーマット出力
- **ログレベル基準**
  - DEBUG: 詳細な変数内容やループ内部
  - INFO: 正常処理の通過点
  - WARNING: リトライ可能な軽微エラー
  - ERROR: 回復不能な致命エラー（アラート）
- ContextVar でトレース ID を伝搬し、一貫したログ追跡を実現

---

## 8. テスト指針

| 項目               | 推奨                                      |
|--------------------|-------------------------------------------|
| **フレームワーク** | `pytest>=8`, `pytest-asyncio`             |
| **パターン**       | Arrange–Act–Assert を徹底                 |
| **カバレッジ**     | 行 95% / 分岐 90% 以上を CI で必須          |
| **テストダブル**   | `unittest.mock`, `pytest-mock`, `factory-boy` |
| **フィクスチャ管理**| `conftest.py` で共通設定をまとめる        |

---

## 9. デザインパターン実装例

### Strategy

```python
from typing import Protocol

class Discount(Protocol):
    def __call__(self, price: float) -> float: ...

def no_discount(p: float) -> float:
    return p

def seasonal_discount(p: float) -> float:
    return p * 0.9

class PriceCalculator:
    def __init__(self, strategy: Discount = no_discount) -> None:
        self._strategy = strategy

    def calc(self, price: float) -> float:
        return self._strategy(price)
```

### Adapter

```python
class PaymentSDK:
    def send(self, payload: dict[str, str]) -> None: ...

class PaymentPort(Protocol):
    def pay(self, amount: int) -> None: ...

class PaymentAdapter:
    def __init__(self, sdk: PaymentSDK) -> None:
        self._sdk = sdk

    def pay(self, amount: int) -> None:
        self._sdk.send({"amount": str(amount)})
```

*(Factory, Observer, Decorator などは付録に追加推奨)*

---

## 10. 非同期 & 並行処理

| 処理           | 推奨手法                                             |
|----------------|------------------------------------------------------|
| I/O バウンド   | `asyncio`, `aiohttp`, `asyncpg`                     |
| CPU バウンド   | `concurrent.futures.ProcessPoolExecutor`            |
| キャンセル制御 | `except asyncio.CancelledError:` は握りつぶさず再送出 |

---

## 11. パフォーマンス最適化

- `functools.cache`, `slots=True` dataclass でメモリ最適化
- `heapq`, `bisect` など組み込みデータ構造を活用
- アルゴリズムは Big-O を意識し、適切なデータ構造を選択
- 必要に応じて Cython や mypyc でコンパイル検討

---

## 12. セキュリティ

1. **Secrets 管理:** `.env`, Vault, Secret Manager を利用しコードに埋め込まない
2. **脆弱性スキャン:** `pip-audit`, `safety` を CI に組み込む
3. **入力検証:** Pydantic や `validators` で堅牢に
4. **Web セキュリティ:** SQLi, XSS, CSRF 対策は OWASP ASVS を参照



# Python のコーディングベストプラクティス

## 方針

- **最初に型とインターフェース（関数のシグネチャ）を考える**
  Python では、PEP 484 に基づく型ヒントや `typing.NewType`、`Protocol` を活用して、処理対象の型と関数のシグネチャを設計します。

- **ファイル冒頭のコメントで仕様を明記する**
  各ファイルの冒頭に、そのファイルでどのような仕様を実現するかを docstring やコメントとして記述します。

- **内部状態を持たない場合は関数を優先する**
  状態が不要な場合は、クラスよりも純粋関数を作成し、テストや再利用がしやすい設計を心がけます。

- **副作用はアダプタパターンで抽象化し、テスト時はインメモリな実装で差し替える**
  外部依存（IO、DB、外部 API など）はアダプタパターンを用いて抽象化し、テスト時にはモックやスタブに置き換えます。

---

## 型の使用方針

1. **具体的な型を使用する**
   - Python では `Any` の使用は最小限にとどめ、必要に応じて `Union` や `Optional` で型を絞り込みます。
   - 標準ライブラリの `typing` モジュールや `typing_extensions` の Utility Types を活用します。

2. **型エイリアスの命名**
   - 意味のある名前を付け、型の意図を明確にします。
   - 例:
     ```python
     from typing import NewType

     UserId = NewType("UserId", str)

     # 良い例
     class UserData:
         def __init__(self, id: UserId, created_at: str):
             self.id = id
             self.created_at = created_at

     # 悪い例（any の使用）
     Data = object
     ```

---

## エラー処理

### 1. Result 型の使用

Python では、成功と失敗を表すために自作の `Result` クラスを用いることがあります。例えば：

```python
from typing import Generic, TypeVar, Union

T = TypeVar("T")
E = TypeVar("E")

class Result(Generic[T, E]):
    def __init__(self, ok: bool, value: Union[T, None] = None, error: Union[E, None] = None):
        self.ok = ok
        self.value = value
        self.error = error

    def is_ok(self) -> bool:
        return self.ok

    def is_err(self) -> bool:
        return not self.ok

def ok(value: T) -> Result[T, E]:
    return Result(True, value=value)

def err(error: E) -> Result[T, E]:
    return Result(False, error=error)
```

エラー型も、具体的なケースを列挙し、エラーメッセージを含めた実装にします。

### 2. エラー処理の例

```python
import requests
from typing import Any

class ApiError(Exception):
    pass

class NetworkError(ApiError):
    pass

class NotFoundError(ApiError):
    pass

class UnauthorizedError(ApiError):
    pass

async def fetch_user(user_id: str) -> Result[Any, ApiError]:
    try:
        response = requests.get(f"https://api.example.com/users/{user_id}")
        if not response.ok:
            if response.status_code == 404:
                return err(NotFoundError("User not found"))
            elif response.status_code == 401:
                return err(UnauthorizedError("Unauthorized"))
            else:
                return err(NetworkError(f"HTTP error: {response.status_code}"))
        return ok(response.json())
    except Exception as error:
        return err(NetworkError(str(error) if isinstance(error, Exception) else "Unknown error"))
```

---

## 実装パターン

### 1. 関数ベース（状態を持たない場合）

```python
from datetime import datetime

def create_logger():
    def log(message: str) -> None:
        print(f"[{datetime.utcnow().isoformat()}] {message}")
    return log
```

### 2. クラスベース（状態を持つ場合）

```python
from typing import Any, Optional
import time

class TimeBasedCache:
    def __init__(self, ttl: float):
        self.ttl = ttl
        self.items: dict[str, dict[str, Any]] = {}

    def get(self, key: str) -> Optional[Any]:
        item = self.items.get(key)
        if item and time.time() < item["expire_at"]:
            return item["value"]
        return None

    def set(self, key: str, value: Any) -> None:
        self.items[key] = {
            "value": value,
            "expire_at": time.time() + self.ttl
        }
```

### 3. アダプターパターン（外部依存の抽象化）

```python
from typing import Callable, Dict, TypeVar, Generic
import requests

T = TypeVar("T")

# Fetcher 型の定義（外部依存の抽象化）
Fetcher = Callable[[str], Result[T, ApiError]]

def create_fetcher(headers: Dict[str, str]) -> Fetcher:
    def fetcher(path: str) -> Result[T, ApiError]:
        try:
            response = requests.get(path, headers=headers)
            if not response.ok:
                return err(NetworkError(f"HTTP error: {response.status_code}"))
            return ok(response.json())
        except Exception as error:
            return err(NetworkError(str(error) if isinstance(error, Exception) else "Unknown error"))
    return fetcher

class ApiClient:
    def __init__(self, get_data: Fetcher, base_url: str):
        self.get_data = get_data
        self.base_url = base_url

    def get_user(self, user_id: str) -> Result[Any, ApiError]:
        return self.get_data(f"{self.base_url}/users/{user_id}")
```

---

## 実装の選択基準

1. **関数を選ぶ場合**
   - 単純な操作のみ
   - 内部状態が不要
   - 依存が少なく、テストが容易

2. **クラスを選ぶ場合**
   - 内部状態の管理が必要
   - 設定やリソースの保持、メソッド間での状態共有、ライフサイクル管理が必要

3. **Adapter を選ぶ場合**
   - 外部依存（API や DB など）の抽象化が必要
   - テスト時に容易にモックに置き換えられるようにしたい
   - 実装の詳細を隠蔽し、差し替え可能性を高める

---

## 一般的なルール

1. **依存性の注入**
   - 外部依存はコンストラクタや関数の引数として注入し、グローバルな状態を避ける
   - テスト時にモックに置き換えられるように設計する

2. **インターフェースの設計**
   - 必要最小限のメソッドを定義し、内部実装の詳細は隠蔽する
   - プラットフォーム固有の実装に依存しない抽象的なインターフェースを構築する

3. **テスト容易性**
   - モックの実装を簡潔にし、エッジケースのテストを充実させる
   - テストヘルパーなどを適切に分離し、テストしやすい構造にする

4. **コードの分割**
   - 単一責任の原則 (SRP) に従い、適切な粒度でモジュール化する
   - 循環参照を避け、モジュール間の依存関係を明確に管理する

5. **コード整頓・可読性向上のための指針**
   - **ガード句（Guard Clauses）を活用する**
     ネストを浅く保つため、条件分岐は早期returnなどでシンプルに。ただし多用しすぎは避ける。
   - **デッドコードはこまめに削除する**
     不要なコードは都度消し、バージョン管理で安全性を担保する。
   - **対称性を意識してコードを統一する**
     同じ振る舞いの処理は表現を揃える。
   - **新旧インターフェースの段階的移行を意識する**
     大規模な一括変更を避け、まず新しいインターフェースを定義して徐々に移行する。
   - **自然な処理順序を意識する**
     「入力→処理→出力」の流れで関数や処理を並べる。
   - **凝集度を高める**
     関連する処理や変数は近くにまとめ、カップリングを下げる。
   - **宣言と初期化はまとめて行う**
     変数宣言と初期化を同時に行い、不要なスコープを作らない。
   - **説明的な変数・定数を使う**
     マジックナンバーや複雑な式は意味のある名前に置き換える。
   - **明示的なパラメータ設計**
     関数には必要な要素を明示的に引数として渡す。
   - **長い処理は適切に分割する**
     ステートメントをチャンク化し、可読性を上げる。
   - **ヘルパー関数を抽出する**
     再利用性の高い処理は関数やメソッドに切り出す。
   - **細分化しすぎない**
     クラスや関数を細切れにしすぎず、適切な粒度を保つ。
   - **コメントは「なぜ」を中心に、冗長なものは削除する**
     「何をしているか」はコード、「なぜそうするか」はコメントで明確に。
   - **ツールを活用し段階的に整頓する**
     IDEの自動警告や静的解析ツールを活用し、小さな改善を積み重ねる。



# テスト駆動開発 (TDD) の基本

## 基本概念

テスト駆動開発（TDD）は、以下のサイクルで進める開発手法です：

1. **Red:**  
   まず、失敗するテストケースを書いて、実装すべき仕様を明確にします。
2. **Green:**  
   テストが通るように、最小限の実装を行います。
3. **Refactor:**  
   コードをリファクタリングして改善し、読みやすさや保守性を向上させます。

## 重要な考え方

- **テストは仕様である:**  
  テストコードは、実装すべき仕様そのものとして扱います。テストケースを見るだけで、どのような挙動が求められているかが分かるようにします。

- **Assert-Act-Arrange の順序で考える:**  
  テストコードの記述順序を次のように意識してください：
  1. **Assert（期待結果）:**  
     最初に期待する結果を定義します。
  2. **Act（操作）:**  
     次にテスト対象の処理を実行します。
  3. **Arrange（準備）:**  
     最後にテスト環境のセットアップや必要な準備コードを記述します。

  ※ 実際の実行順序は Arrange → Act → Assert ですが、実装の際は期待結果から始めることで、目的を明確にしてコードを書き進められます。

- **テスト名は「状況→操作→結果」の形式で記述:**  
  例：  
  「有効なトークンの場合にユーザー情報を取得すると成功すること」  
  「無効なトークンの場合にエラーが返されること」

## リファクタリングフェーズの重要ツール

テストが通った後のリファクタリングフェーズでは、以下のツールを活用してください：

1. **静的解析・型チェック:**
   - `mypy .`  
     型チェックを行い、型安全性を確認します。
   - `ruff .`
     コード品質とスタイルのチェックを実施します。

2. **デッドコード検出・削除:**
   - [vulture](https://pypi.org/project/vulture/) を使用して、未使用の関数やエクスポートを定期的に検出し、必要に応じて削除します。

3. **コードカバレッジ測定:**
   - `pytest --cov=.` を使用してテストカバレッジを計測し、coverage.py でレポートを確認します。
     ```bash
     pytest --cov=.  # テストを実行しカバレッジレポートを生成
     coverage report  # カバレッジの概要を表示
     ```
   
4. **Git によるバージョン管理:**
   - 各フェーズ（テスト作成→実装→リファクタリング）の完了時に、変更内容を Git にコミットします。  
   - タスク完了時にユーザーに確認してから、以下のコマンドでコミットを実行します：
     ```bash
     git status  # 変更状態を確認
     git add <関連ファイル>
     git commit -m "<適切なコミットメッセージ>"
     ```
   - コミットメッセージは以下のプレフィックスを使い分けます：
     - `test:` - テストの追加・修正
     - `feat:` - 新機能の実装
     - `fix:` - バグ修正
     - `refactor:` - リファクタリング
     - `docs:` - ドキュメントの更新
     - `chore:` - ビルドプロセスやツールの変更

## 詳細情報

Python 環境における TDD の詳細な実践方法や各種ツールの活用方法については、プロジェクト内のドキュメント（例: `docs/python-tdd.md`）や社内のナレッジベースを参照してください。


このプロジェクトには以下のモードが定義されています:
- python-tdd Python:TDD at .cline/roomodes/python-tdd.md
- python-module Python:Module at .cline/roomodes/python-module.md
- python-refactor Deno:Refactor at .cline/roomodes/python-refactor.md
- uv-script uv-script Python at .cline/roomodes/uv-script.md